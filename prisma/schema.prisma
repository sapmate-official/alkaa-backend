generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  hashedPassword String
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Organization {
  id                    String                 @id @default(cuid())
  name                  String
  industry              String?
  subscriptionPlan      String
  subscriptionStart     DateTime               @default(now())
  subscriptionEnd       DateTime?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  settings              Json?
  departments           Department[]
  holidays              Holiday[]
  holidayTypes          HolidayType[]
  leaveTypes            LeaveType[]
  notificationTemplates NotificationTemplate[]
  roles                 Role[]
  users                 User[]
}

model Department {
  id               String       @id @default(cuid())
  orgId            String
  name             String
  description      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  budget           Float?
  code             String?
  headId           String?
  location         String?
  parentId         String?
  status           Boolean      @default(true)
  departmentHead   User?        @relation("DepartmentHead", fields: [headId], references: [id])
  organization     Organization @relation(fields: [orgId], references: [id])
  parentDepartment Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  subDepartments   Department[] @relation("DepartmentHierarchy")
  users            User[]       @relation("UserDepartment")

  @@unique([orgId, name])
  @@unique([orgId, code])
}

model Role {
  id           String           @id @default(cuid())
  orgId        String
  name         String
  description  String?
  isDefault    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  organization Organization     @relation(fields: [orgId], references: [id])
  permissions  RolePermission[]
  users        UserRole[]

  @@unique([orgId, name])
}

model PermissionCategory {
  id            String                  @id @default(cuid())
  name          String                  @unique
  description   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  subcategories PermissionSubcategory[]
}

model PermissionSubcategory {
  id          String             @id @default(cuid())
  categoryId  String
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions Permission[]
  category    PermissionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, name])
}

model Permission {
  id            String                 @id @default(cuid())
  name          String
  description   String?
  module        String?
  action        String
  createdAt     DateTime               @default(now())
  subcategoryId String?
  subcategory   PermissionSubcategory? @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  roles         RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model User {
  id                   String             @id @default(cuid())
  orgId                String
  departmentId         String?
  managerId            String?
  email                String             @unique
  hashedPassword       String?
  refreshToken         String?
  status               UserStatus         @default(active)
  verificationToken    String?            @unique
  annualPackage        Float?             @default(0.0)
  monthlySalary        Float?             @default(0.0)
  hiredDate            DateTime?          @default(now())
  dateOfBirth          DateTime?
  address              String?
  adharNumber          String?
  panNumber            String?
  mobileNumber         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  employeeId           String?
  terminationDate      DateTime?
  firstName            String?            @default("unknown")
  lastName             String?            @default("unknown")
  attendanceRecords    AttendanceRecord[]
  bankDetails          BankDetails?
  Department           Department[]       @relation("DepartmentHead")
  leaveBalances        LeaveBalance[]
  leaveRequests        LeaveRequest[]
  notifications        Notification[]
  PushSubscription     PushSubscription[]
  salaryParameter      SalaryParameter?
  salaryRecords        SalaryRecord[]
  receivedTransactions TransactionTable[] @relation("ReceiverTransaction")
  sentTransactions     TransactionTable[] @relation("SenderTransaction")
  department           Department?        @relation("UserDepartment", fields: [departmentId], references: [id])
  manager              User?              @relation("UserManager", fields: [managerId], references: [id])
  subordinates         User[]             @relation("UserManager")
  organization         Organization       @relation(fields: [orgId], references: [id])
  roles                UserRole[]

  @@unique([orgId, email])
  @@index([orgId, departmentId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model BankDetails {
  id            String   @id @default(cuid())
  userId        String   @unique
  accountHolder String
  accountNumber String
  ifscCode      String
  bankName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model LeaveType {
  id               String         @id @default(cuid())
  orgId            String
  name             String
  description      String?
  annualLimit      Int
  requiresApproval Boolean        @default(true)
  isPaid           Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  carryForward     Boolean        @default(false)
  maxCarryForward  Int            @default(0)
  leaveBalances    LeaveBalance[]
  leaveRequests    LeaveRequest[]
  organization     Organization   @relation(fields: [orgId], references: [id])

  @@unique([orgId, name])
}

model LeaveBalance {
  id            String    @id @default(cuid())
  userId        String
  leaveTypeId   String
  usedDays      Int       @default(0)
  remainingDays Int
  year          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  carryForward  Int       @default(0)
  leaveType     LeaveType @relation(fields: [leaveTypeId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, leaveTypeId, year])
}

model LeaveRequest {
  id             String      @id @default(cuid())
  userId         String
  leaveTypeId    String
  startDate      DateTime
  endDate        DateTime
  status         LeaveStatus @default(PENDING)
  reason         String?
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  attachments    Json?
  numberOfDays   Float
  leaveType      LeaveType   @relation(fields: [leaveTypeId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
}

model AttendanceRecord {
  id                 String                        @id @default(cuid())
  userId             String
  date               DateTime                      @default(now())
  sessionNumber      Int
  checkInTime        DateTime
  checkOutTime       DateTime?
  checkInLocation    Json
  checkOutLocation   Json?
  status             AttendanceStatus              @default(PRESENT)
  notes              String?
  duration           Json?
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  deviceInfo         String?
  ipAddress          String?
  verificationStatus AttendanceVerificationStatus? @default(UNVERIFIED)
  user               User                          @relation(fields: [userId], references: [id])
  UserDailyReport    UserDailyReport[]

  @@unique([userId, date, sessionNumber])
  @@index([userId, date])
}

model SalaryParameter {
  id                   String   @id @default(cuid())
  userId               String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  hraPercentage        Float    @default(40)
  daPercentage         Float    @default(10)
  taPercentage         Float    @default(10)
  pfPercentage         Float    @default(12)
  taxPercentage        Float    @default(10)
  insuranceFixed       Float    @default(1000)
  additionalAllowances Json?
  additionalDeductions Json?
  user                 User     @relation(fields: [userId], references: [id])
}

model SalaryRecord {
  id                 String                   @id @default(cuid())
  userId             String
  month              Int
  year               Int
  basicSalary        Float
  tax                Float                    @default(0)
  netSalary          Float
  status             PayrollStatus            @default(PENDING)
  processedAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  allowances         Json?
  paymentMode        String?
  paymentRef         String?
  remarks            String?
  deductions         Json?
  incentive          Float?
  bonus              Float?
  user               User                     @relation(fields: [userId], references: [id])
  salaryTransactions salaryTransactionTable[]

  @@unique([userId, month, year])
  @@index([userId, year, month])
}

model NotificationTemplate {
  id            String           @id @default(cuid())
  orgId         String
  name          String
  type          NotificationType
  subject       String
  content       String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  variables     Json?
  notifications Notification[]
  organization  Organization     @relation(fields: [orgId], references: [id])

  @@unique([orgId, name])
}

model Notification {
  id         String               @id @default(cuid())
  userId     String
  templateId String
  content    String
  isRead     Boolean              @default(false)
  createdAt  DateTime             @default(now())
  metadata   Json?
  readAt     DateTime?
  template   NotificationTemplate @relation(fields: [templateId], references: [id])
  user       User                 @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model BackgroundJob {
  id           String    @id @default(cuid())
  type         JobType
  status       JobStatus @default(PENDING)
  payload      Json
  scheduledFor DateTime
  completedAt  DateTime?
  error        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  priority     Int       @default(0)

  @@index([status, scheduledFor])
}

model Holiday {
  id           String       @id @default(cuid())
  orgId        String
  name         String
  date         DateTime
  description  String?
  isOptional   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  type         String?
  organization Organization @relation(fields: [orgId], references: [id])
  holidayType  HolidayType? @relation(fields: [type], references: [id])

  @@unique([orgId, date])
}

model HolidayType {
  id           String       @id @default(cuid())
  name         String
  policy       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orgId        String
  Holiday      Holiday[]
  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, name])
}

model TransactionTable {
  id                 String                   @id @default(cuid())
  senderUserId       String
  recieverUserId     String
  amount             Float
  type               String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  bankTransactionId  String?
  recieverDetails    User                     @relation("ReceiverTransaction", fields: [recieverUserId], references: [id])
  senderDetails      User                     @relation("SenderTransaction", fields: [senderUserId], references: [id])
  salaryTransactions salaryTransactionTable[]
}

model salaryTransactionTable {
  transactionId  String
  salaryRecordId String
  id             String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  salaryRecord   SalaryRecord     @relation(fields: [salaryRecordId], references: [id])
  transaction    TransactionTable @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, salaryRecordId])
}

model PushSubscription {
  id             String   @id @default(cuid())
  userId         String
  endpoint       String   @unique
  keys           Json
  expirationTime Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserDailyReport {
  id            String           @id @default(cuid())
  attendanceId  String
  reportContent Json
  attendance    AttendanceRecord @relation(fields: [attendanceId], references: [id])

  @@index([id, attendanceId])
}

enum UserStatus {
  active
  inactive
  suspended
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LATE
  EARLY_DEPARTURE
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  FAILED
  PROCESSING
}

enum NotificationType {
  EMAIL
  PUSH
  IN_APP
}

enum JobType {
  PAYROLL_PROCESSING
  LEAVE_BALANCE_UPDATE
  NOTIFICATION_DISPATCH
  ATTENDANCE_REPORT
  DATA_BACKUP
  SYSTEM_MAINTENANCE
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum AttendanceVerificationStatus {
  UNVERIFIED
  VERIFIED
  REJECTED
}
